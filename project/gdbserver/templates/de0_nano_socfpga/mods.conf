package genconfig

configuration conf {
	include embox.arch.system(core_freq=500000000) /* TODO: check actual value */
	include embox.arch.arm.armv7a.head(use_fast_boot=true)
	include embox.arch.arm.armv7a.cpu_idle
	include embox.arch.arm.armlib.locore
	include embox.arch.arm.armlib.interrupt
	include embox.arch.arm.armlib.context
	include embox.arch.arm.armlib.mem_barriers
	include embox.arch.arm.armlib.static_excpt_table
	include embox.arch.arm.stackframe
	include embox.arch.arm.libarch
	include embox.arch.arm.vfork

	@Runlevel(0) include embox.arch.arm.mmu_small_page(domain_access=1)
	//@Runlevel(0) include embox.arch.arm.mmu_small_page(domain_access=3)
	@Runlevel(0) include embox.arch.arm.mmuinfo

	include embox.arch.arm.fpu.vfpv3

	@Runlevel(2) include embox.driver.cache.pl310(base_addr=0xfffef000)


	include embox.driver.interrupt.gicv1(gicd_base=0xfffec100, gicc_base=0xfffed000)

	include embox.driver.serial.ns16550
	include embox.driver.serial.ns16550_diag(base_addr=0xffc02000)
	include embox.driver.serial.ns16550_ttyS0(base_addr=0xffc02000, irq_num=194)
	include embox.driver.diag(impl="embox__driver__serial__ns16550_diag")

	@Runlevel(0) include embox.driver.clock.cortexa9(periph_base_addr=0xfffec000,irq_num=29,log_level="LOG_ERR")
	include embox.kernel.time.jiffies(cs_name="cortexa9_timer")

	@Runlevel(2) include embox.driver.net.dwc_gmac(base_addr=0xff702000, irq_num=152)
	@Runlevel(2) include embox.driver.net.loopback

	@Runlevel(2) include embox.driver.gpio.dwapb_gpio(
		base_addr=0xff708000, gpio_ports=3, log_level="LOG_ERR")
	@Runlevel(2) include embox.driver.mmc.host.dw_mmc_socfpga(log_level="LOG_ERR", base_addr=0xFF704000, irq_num=171)
	@Runlevel(2) include embox.driver.mmc.mmc_core(log_level="LOG_ERR")

	@Runlevel(2) include embox.driver.i2c.i2c_designware
	@Runlevel(2) include embox.driver.i2c.i2c_designware_0
	/* SPI1 shares the same pins with I2C1! */
	@Runlevel(2) include embox.driver.i2c.i2c_designware_1

	/* SPI1 shares the same pins with I2C1! */
	/*
	include embox.driver.spi.dw_spi_drv(log_level="LOG_DEBUG")
	include embox.driver.spi.dw_spi1(base_addr=0xfff01000, spi_de0_nano_soc=true, log_level="LOG_DEBUG")
	*/

	include embox.driver.sensors.adxl345
	include embox.driver.fpga.socfpga(irq_num=207, log_level="LOG_ERR")


	@Runlevel(0) include embox.kernel.cpu.bkl
	@Runlevel(0) include embox.kernel.cpu.cpudata
	@Runlevel(2) include embox.kernel.irq
	@Runlevel(2) include embox.kernel.critical
	@Runlevel(2) include embox.kernel.timer.sleep
	@Runlevel(2) include embox.kernel.timer.strategy.head_timer
	@Runlevel(2) include embox.kernel.time.kernel_time
	@Runlevel(2) include embox.kernel.task.multi
	@Runlevel(2) include embox.kernel.thread.core(thread_stack_size=0x20000, thread_stack_align=8)
	include embox.kernel.stack(stack_size=0x20000)
	include embox.kernel.sched.strategy.priority_based
	include embox.kernel.thread.signal.sigstate
	include embox.kernel.thread.signal.siginfoq
	include embox.kernel.task.resource.env(env_str_len=64)
	@Runlevel(0) include embox.kernel.stack(stack_size=65536)

//	@Runlevel(0) include embox.kernel.task.kernel_task

	@Runlevel(2) include embox.fs.dvfs.core
	@Runlevel(2) include embox.fs.driver.fat_dvfs(log_level="LOG_ERR")
	@Runlevel(2) include embox.fs.driver.initfs_dvfs
	@Runlevel(2) include embox.fs.rootfs_dvfs
	include embox.compat.posix.file_system_dvfs
	include embox.fs.driver.devfs_dvfs

	include embox.compat.posix.passwd
	include embox.compat.libc.stdio.print(support_floating=1)

	include embox.kernel.task.resource.errno

	include embox.lib.debug.whereami

	@Runlevel(0) include embox.mem.phymem
	include embox.mem.bitmask(page_size=1048576)
	@Runlevel(2) include embox.mem.static_heap(heap_size=64000000)
	@Runlevel(2) include embox.mem.heap_bm(heap_size=32000000)

	@Runlevel(2) include embox.net.skbuff(amount_skb=4000)
	@Runlevel(2) include embox.net.skbuff_data(
			amount_skb_data=4000,data_size=1514,data_align=1,data_padto=1,ip_align=true)
	@Runlevel(2) include embox.net.skbuff_extra(
			amount_skb_extra=128,extra_size=10,extra_align=1,extra_padto=1)

	include embox.net.arp
	include embox.net.af_inet(amount_inet_sock=40)
	include embox.net.ipv4
	include embox.net.icmpv4
	include embox.net.udp
	include embox.net.tcp
	include embox.net.udp_sock
	include embox.net.tcp_sock(amount_tcp_sock=30)
	include embox.net.raw_sock

	include embox.test.kernel.timer_test

	@Runlevel(2) include embox.cmd.sh.tish(prompt="%u@%h:%w%$", rich_prompt_support=1, builtin_commands="exit logout cd export mount umount")

	include embox.cmd.help
	include embox.cmd.sys.version

	include embox.cmd.service
	include embox.cmd.sys.env
	include embox.cmd.sys.export
	include embox.cmd.sys.uname
	include embox.cmd.sys.export
	include embox.cmd.sys.version
	include embox.cmd.sys.date

	include embox.cmd.proc.thread
	include embox.cmd.proc.top

	include embox.cmd.wc
	include embox.cmd.fs.head
	include embox.cmd.hw.mem

	include embox.cmd.fs.dd
	include embox.cmd.fs.md5sum
	include embox.cmd.fs.uniq
	include embox.cmd.fs.cat
	include embox.cmd.fs.cd
	include embox.cmd.fs.pwd
	include embox.cmd.fs.ls
	include embox.cmd.fs.rm
	include embox.cmd.fs.mkfs
	include embox.cmd.fs.mount
	include embox.cmd.fs.more
	include embox.cmd.fs.umount
	include embox.cmd.fs.stat
	include embox.cmd.fs.echo
	include embox.cmd.fs.touch
	include embox.cmd.fs.mkdir
	include embox.cmd.fs.cp
	include embox.cmd.fs.mv

	include embox.cmd.net.arp
	include embox.cmd.net.netstat
	include embox.cmd.net.arping
	include embox.cmd.net.rarping
	include embox.cmd.net.ifconfig
	include embox.cmd.net.ping
	include embox.cmd.net.iptables
	include embox.cmd.net.ifconfig
	include embox.cmd.net.route
	include embox.cmd.net.tftp
	include embox.cmd.net.snmpd
	include embox.cmd.net.ntpdate
	include embox.cmd.net.telnetd
	include embox.cmd.net.nslookup
	include embox.cmd.net.netmanager

/* gdbserver */

	/* Use this to debug via tcp */
	include embox.cmd.gdbserver
	include embox.arch.arm.armlib.gdb
	include embox.init.system_start_service(log_level="LOG_INFO", tty_dev="ttyS0")
	
	/* Use this to debug via serial port */
	// include embox.cmd.gdbserver
	// include embox.arch.arm.armlib.gdb
	// include embox.driver.virtual.tty_stub(tty_name="ttyS1")
	// include embox.init.system_start_service(log_level="LOG_INFO", tty_dev="ttyS1")
}
