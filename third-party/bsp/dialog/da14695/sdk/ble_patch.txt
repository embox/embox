diff -aur SDK_10.0.8.105/sdk/bsp/system/sys_man/sys_watchdog.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/bsp/system/sys_man/sys_watchdog.c
--- SDK_10.0.8.105/sdk/bsp/system/sys_man/sys_watchdog.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/bsp/system/sys_man/sys_watchdog.c	2020-05-21 14:35:29.526238242 +0300
@@ -19,8 +19,8 @@
 
 #include "sys_watchdog.h"
 #include "sys_watchdog_internal.h"
-#include "FreeRTOS.h"
-#include "timers.h"
+//#include "FreeRTOS.h"
+//#include "timers.h"
 #include "osal.h"
 
 /* mutex to synchronize access to wdog data */
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/adapter/src/ad_ble.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/adapter/src/ad_ble.c
--- SDK_10.0.8.105/sdk/interfaces/ble/adapter/src/ad_ble.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/adapter/src/ad_ble.c	2020-05-21 16:00:33.693168168 +0300
@@ -19,8 +19,8 @@
 #include "ble_config.h"
 
 #include "osal.h"
-#include "queue.h"
-#include "event_groups.h"
+// #include "queue.h"
+// #include "event_groups.h"
 #if (BLE_WINDOW_STATISTICS == 1) || (BLE_SLEEP_PERIOD_DEBUG == 1)
 #include "logging.h"
 #endif
@@ -247,6 +247,7 @@
         OS_TASK_NOTIFY(adapter_if.task, mainBIT_EVENT_QUEUE_AVAIL, OS_NOTIFY_SET_BITS);
 }
 
+#include "interrupts.h"
 void ad_ble_task_notify(uint32_t value)
 {
         if (in_interrupt()) {
@@ -494,7 +495,7 @@
                 /* Check if we should call the previously skipped TX done callback */
                 if (ulNotifiedValue & mainBIT_EVENT_QUEUE_AVAIL) {
                         sleep_status = BLE_ACTIVE;
-                        if (ad_ble_stack_wr_cb && uxQueueSpacesAvailable(adapter_if.evt_q)) {
+                        if (ad_ble_stack_wr_cb && OS_QUEUE_SPACES_AVAILABLE(adapter_if.evt_q)) {
                                 /* Call pending BLE stack write callback */
                                 ad_ble_stack_wr_cb(BLE_STACK_IO_OK);
 
@@ -535,7 +536,7 @@
 
                 if (ulNotifiedValue & mainBIT_COMMAND_QUEUE) {
                         /* The message may have already been read in the while () loop below! */
-                        if ( OS_QUEUE_GET(adapter_if.cmd_q, &received_msg, 0)) {
+                        if ( OS_QUEUE_GET(adapter_if.cmd_q, &received_msg, 0) == OS_QUEUE_OK) {
                                 /* Make sure a valid OP CODE is received */
                                 OS_ASSERT(received_msg->op_code < AD_BLE_OP_CODE_LAST);
                                 current_op = received_msg->op_code;
@@ -586,7 +587,7 @@
 
 
                         /* Check command queue for incoming messages */
-                        if (uxQueueMessagesWaiting(adapter_if.cmd_q)) {
+                        if (OS_QUEUE_MESSAGES_WAITING(adapter_if.cmd_q)) {
                                 /* Get message from the command queue. */
                                 OS_QUEUE_GET(adapter_if.cmd_q, &received_msg, 0);
                                 /* Make sure a valid op code is received */
@@ -607,10 +608,10 @@
                                         OS_FREE(received_msg);
                                 }
                         }
-                        else if ( (USE_BLE_SLEEP == 1) && (cm_lp_clk_is_avail()) && (!stay_active) ) {
-                                /* Sleep is possible only when the LP clock is ready! */
-                                ret = sleep_when_possible();
-                        }
+                        //else if ( (USE_BLE_SLEEP == 1) && (cm_lp_clk_is_avail()) && (!stay_active) ) {
+                        //        /* Sleep is possible only when the LP clock is ready! */
+                        //        ret = sleep_when_possible();
+                        //}
                         else if (ble_block()) {
                                 /* There are no pending BLE actions, so exit the while () loop. */
                                 ret = -1;
@@ -810,9 +811,9 @@
                         ble_stack_initialized = true;
 
                         /* Apply TCS settings */
-                        ad_ble_sys_tcs_config();
-                        ad_ble_synth_tcs_config();
-                        ad_ble_rfcu_tcs_config();
+                        //ad_ble_sys_tcs_config();
+                        //ad_ble_synth_tcs_config();
+                        //ad_ble_rfcu_tcs_config();
 #if (USE_BLE_SLEEP == 1)
                         ad_ble_update_wakeup_time();
                         #if (dg_configUSE_LP_CLK == LP_CLK_RCX)
@@ -967,7 +968,7 @@
                         /* Post item to queue. */
                         if (ad_ble_event_queue_send(&msgBuf, 0) == OS_OK) {
                                 /* Check free space on BLE adapter's event queue. */
-                                if (uxQueueSpacesAvailable(adapter_if.evt_q)) {
+                                if (OS_QUEUE_SPACES_AVAILABLE(adapter_if.evt_q)) {
                                         /* Call BLE stack I/O TX done callback right away. */
                                         callback(BLE_STACK_IO_OK);
                                 } else {
@@ -1049,9 +1050,9 @@
         return ble_parameters;
 }
 #if (dg_configPMU_ADAPTER == 1)
-ADAPTER_INIT_DEP2(ad_ble_adapter, ad_ble_init, ad_pmu_adapter, ad_nvparam_adapter);
+//ADAPTER_INIT_DEP2(ad_ble_adapter, ad_ble_init, ad_pmu_adapter, ad_nvparam_adapter);
 #else
-ADAPTER_INIT_DEP1(ad_ble_adapter, ad_ble_init, ad_nvparam_adapter);
+//ADAPTER_INIT_DEP1(ad_ble_adapter, ad_ble_init, ad_nvparam_adapter);
 #endif /* dg_configPMU_ADAPTER */
 
 #elif (dg_configNVMS_ADAPTER == 1)
@@ -1065,9 +1066,9 @@
 #else
 
 #if (dg_configPMU_ADAPTER == 1)
-ADAPTER_INIT_DEP1(ad_ble_adapter, ad_ble_init, ad_pmu_adapter);
+//ADAPTER_INIT_DEP1(ad_ble_adapter, ad_ble_init, ad_pmu_adapter);
 #else
-ADAPTER_INIT(ad_ble_adapter, ad_ble_init);
+//ADAPTER_INIT(ad_ble_adapter, ad_ble_init);
 #endif /* dg_configPMU_ADAPTER */
 
 #endif /* dg_configNVPARAM_ADAPTER */
@@ -1079,7 +1080,7 @@
 }
 #endif /* CONFIG_USE_BLE */
 
-void cmac2sys_notify()
+__attribute__((weak)) void cmac2sys_notify()
 {
         OS_TASK_NOTIFY_FROM_ISR(adapter_if.task, mainBIT_BLE_CMAC_IRQ, OS_NOTIFY_SET_BITS);
 }
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/api/src/ble_gap.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/api/src/ble_gap.c
--- SDK_10.0.8.105/sdk/interfaces/ble/api/src/ble_gap.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/api/src/ble_gap.c	2020-05-21 14:35:29.527238237 +0300
@@ -13,7 +13,7 @@
  */
 
 #include <string.h>
-#include "FreeRTOS.h"
+//#include "FreeRTOS.h"
 #include "ble_common.h"
 #include "osal.h"
 #include "ble_gap.h"
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr.c
--- SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr.c	2020-05-21 16:30:08.969551078 +0300
@@ -17,10 +17,10 @@
 #include "ble_config.h"
 #include "ble_stack_config.h"
 
-#include "FreeRTOS.h"
-#include "task.h"
-#include "queue.h"
-#include "semphr.h"
+//#include "FreeRTOS.h"
+//#include "task.h"
+//#include "queue.h"
+//#include "semphr.h"
 
 #include "sdk_list.h"
 #include "ble_common.h"
@@ -238,13 +238,13 @@
 
                 if (ulNotifiedValue & mainBIT_ADAPTER_EVENT_QUEUE) {
                         /* Make sure there are messages waiting on the queue */
-                        if (!uxQueueMessagesWaiting(adapter_if->evt_q)) {
+                        if (!OS_QUEUE_MESSAGES_WAITING(adapter_if->evt_q)) {
                                 goto no_event;
                         }
 
                         /* Check if there is free space on BLE manager's event queue */
 #if (BLE_MGR_USE_EVT_LIST == 0)
-                        if (uxQueueSpacesAvailable(mgr_if.evt_q))
+                        if (OS_QUEUE_SPACES_AVAILABLE(mgr_if.evt_q))
 #endif /* (BLE_MGR_USE_EVT_LIST == 0) */
                         {
                                 /* Get message from queue */
@@ -324,7 +324,7 @@
                                  * Check if there are more messages waiting in the BLE adapter's
                                  * event queue.
                                  */
-                                if (uxQueueMessagesWaiting(adapter_if->evt_q)) {
+                                if (OS_QUEUE_MESSAGES_WAITING(adapter_if->evt_q)) {
                                         OS_TASK_NOTIFY(mgr_if.task,
                                                 mainBIT_ADAPTER_EVENT_QUEUE, OS_NOTIFY_SET_BITS);
                                 }
@@ -339,7 +339,7 @@
 no_event:
 #if ((BLE_MGR_DIRECT_ACCESS == 0) || (defined(BLE_STACK_PASSTHROUGH_MODE)))
                 if (ulNotifiedValue & mainBIT_MANAGER_COMMAND_QUEUE) {
-                        if (uxQueueMessagesWaiting(mgr_if.cmd_q)) {
+                        if (OS_QUEUE_MESSAGES_WAITING(mgr_if.cmd_q)) {
                                 ble_mgr_msg_hdr_t *cmd;
 
                                 /* Get command from the queue */
@@ -352,7 +352,7 @@
                                 }
 
                                 /* Check if there are messages waiting in the command queue */
-                                if (uxQueueMessagesWaiting(mgr_if.cmd_q)) {
+                                if (OS_QUEUE_MESSAGES_WAITING(mgr_if.cmd_q)) {
                                         OS_TASK_NOTIFY(mgr_if.task,
                                                 mainBIT_MANAGER_COMMAND_QUEUE, OS_NOTIFY_SET_BITS);
                                 }
@@ -363,7 +363,7 @@
 #if (BLE_MGR_USE_EVT_LIST == 0)
                 if (ulNotifiedValue & mainBIT_EVENT_CONSUMED) {
                         /* Check if blocked and if there is space on the event queue */
-                        if (ble_mgr_blocked && uxQueueSpacesAvailable(mgr_if.evt_q)) {
+                        if (ble_mgr_blocked && OS_QUEUE_SPACES_AVAILABLE(mgr_if.evt_q)) {
                                 /* Set flag to false */
                                 ble_mgr_blocked = false;
 
@@ -392,7 +392,7 @@
 #endif
 
                 /* Check if BLE adapter is blocked and if there is free space on its event queue */
-                if (ble_mgr_adapter_is_blocked() && uxQueueSpacesAvailable(adapter_if->evt_q)) {
+                if (ble_mgr_adapter_is_blocked() && OS_QUEUE_SPACES_AVAILABLE(adapter_if->evt_q)) {
                         /* Notify BLE adapter that there is free space on its event queue */
                         ad_ble_notify_event_queue_avail();
                 }
@@ -420,13 +420,13 @@
 
         /* Create needed mutexes */
         (void) OS_MUTEX_CREATE(ble_interface_lock);
-        configASSERT(ble_interface_lock);
+        OS_ASSERT(ble_interface_lock);
 #ifndef BLE_STACK_PASSTHROUGH_MODE
         (void) OS_MUTEX_CREATE(ble_dev_params_lock);
-        configASSERT(ble_dev_params_lock);
+        OS_ASSERT(ble_dev_params_lock);
 #if (BLE_MGR_DIRECT_ACCESS == 1)
         (void) OS_MUTEX_CREATE(ble_waitqueue_lock);
-        configASSERT(ble_waitqueue_lock);
+        OS_ASSERT(ble_waitqueue_lock);
 #endif /* (BLE_MGR_DIRECT_ACCESS == 1) */
 
         /* Set default BLE device parameters */
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_ad_msg.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_ad_msg.c
--- SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_ad_msg.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_ad_msg.c	2020-05-21 14:35:29.528238233 +0300
@@ -13,7 +13,7 @@
  */
 
 #include <string.h>
-#include "FreeRTOS.h"
+//#include "FreeRTOS.h"
 #include "ble_stack_config.h"
 #include "ble_common.h"
 #include "ble_mgr_helper.h"
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_gap.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_gap.c
--- SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_gap.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_gap.c	2020-05-21 14:35:29.528238233 +0300
@@ -147,7 +147,7 @@
 }
 
 /** \brief Translate Dialog API role to GTL API role */
-static uint8_t dlg_role_to_gtl_role(gap_role_t dlg_role)
+uint8_t dlg_role_to_gtl_role(gap_role_t dlg_role)
 {
         gap_role_t gtl_role = GAP_ROLE_NONE;
 
@@ -176,7 +176,7 @@
 }
 
 /** \brief Create GTL system configuration command using current ble_dev_params */
-static ble_mgr_common_stack_msg_t *ble_gap_dev_params_to_gtl(ble_dev_params_t *ble_dev_params)
+ble_mgr_common_stack_msg_t *ble_gap_dev_params_to_gtl(ble_dev_params_t *ble_dev_params)
 {
         ble_mgr_common_stack_msg_t *gmsg;
         struct gapm_set_dev_config_cmd *gcmd;
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_gtl.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_gtl.c
--- SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_gtl.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_gtl.c	2020-05-21 14:35:29.529238228 +0300
@@ -13,7 +13,7 @@
  */
 
 #include <string.h>
-#include "FreeRTOS.h"
+//#include "FreeRTOS.h"
 #include "co_version.h"
 #include "ble_stack_config.h"
 
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_helper.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_helper.c
--- SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_helper.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/ble_mgr_helper.c	2020-05-21 14:35:29.529238228 +0300
@@ -19,6 +19,8 @@
 #include "ble_mgr_helper.h"
 #include "ble_common.h"
 
+#include "sdk_defs.h"
+
 void *alloc_ble_msg(uint16_t op_code, uint16_t size)
 {
         ble_mgr_msg_hdr_t *msg;
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/manager/src/storage.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/storage.c
--- SDK_10.0.8.105/sdk/interfaces/ble/manager/src/storage.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/storage.c	2020-05-21 14:35:29.529238228 +0300
@@ -13,7 +13,7 @@
  */
 
 #include <string.h>
-#include "FreeRTOS.h"
+//#include "FreeRTOS.h"
 #include "osal.h"
 #include "ble_mgr.h"
 #include "storage.h"
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/manager/src/storage_flash.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/storage_flash.c
--- SDK_10.0.8.105/sdk/interfaces/ble/manager/src/storage_flash.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/manager/src/storage_flash.c	2020-05-21 14:35:29.529238228 +0300
@@ -13,7 +13,7 @@
  */
 
 #include <string.h>
-#include "FreeRTOS.h"
+//#include "FreeRTOS.h"
 #include "osal.h"
 #include "ble_config.h"
 #include "storage.h"
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/stack/config/ble_stack_config.h ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/stack/config/ble_stack_config.h
--- SDK_10.0.8.105/sdk/interfaces/ble/stack/config/ble_stack_config.h	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/stack/config/ble_stack_config.h	2020-05-21 14:35:29.529238228 +0300
@@ -23,6 +23,8 @@
 
 #include "ble_config.h"
 
+#include "sdk_defs.h"
+
 
 #define RAM_BUILD
 
diff -aur SDK_10.0.8.105/sdk/interfaces/ble/stack/da14690/src/arch_main.c ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/stack/da14690/src/arch_main.c
--- SDK_10.0.8.105/sdk/interfaces/ble/stack/da14690/src/arch_main.c	2019-12-20 11:51:02.000000000 +0300
+++ ../build/extbld/third_party/bsp/dialog/da14695/sdk/SDK_10.0.8.105/sdk/interfaces/ble/stack/da14690/src/arch_main.c	2020-05-21 15:53:14.276708040 +0300
@@ -52,8 +52,8 @@
 void lib_ble_stack_reset(uint8_t reset_type);
 bool cmac_cpu_wakeup(void);
 
-void timer_init(void);
-void ble_timer_callback(void* varg);
+//void timer_init(void);
+//void ble_timer_callback(void* varg);
 
 bool ke_sleep_check(void);
 
@@ -64,7 +64,7 @@
 #define KE_GROSSTIMER_MASK      ((uint32_t)0x007FFFFF)
 #define ODD_TO_NEXT_EVEN(x)     ((x) & 0x01 ? x+1 : x)
 
-__RETAINED OS_TIMER ble_timer;
+//__RETAINED OS_TIMER ble_timer;
 __RETAINED uint8_t cmac_system_tcs_length;
 __RETAINED uint8_t cmac_synth_tcs_length;
 __RETAINED uint8_t cmac_rfcu_tcs_length;
@@ -260,6 +260,7 @@
                 power_ctrl_reg_values.onsleep_value;
 
         GLOBAL_INT_RESTORE();
+#if 0
 
         /*
          * Check NVPARAM for valid configuration values and write to proper CMAC configuration table
@@ -310,7 +311,7 @@
                 cmac_dynamic_config_table_ptr->sleep_enable = (bool) sleep_nvparam;
                 ad_ble_stay_active(!sleep_nvparam);
         }
-
+#endif
 }
 
 /**
@@ -322,6 +323,7 @@
  *       CMAC parameters.
  ****************************************************************************************
  */
+extern int os_arch_main_init(void);
 void ble_stack_init(void)
 {
         /* Make sure that LP clock is enabled */
@@ -345,7 +347,9 @@
         }
 
         /* Initialize BLE timer */
-        timer_init();
+        //timer_init();
+
+		os_arch_main_init();
 
         /* Initialize BLE stack (Controller and Host) */
         lib_ble_stack_init();
@@ -468,6 +472,7 @@
         return result;
 }
 
+#if 0
 /*
  * @brief Initialize BLE timer
  */
@@ -476,6 +481,7 @@
         ble_timer = OS_TIMER_CREATE("ble_tmr", 100 /* Dummy */, 0, 0, ble_timer_callback);
         OS_ASSERT(ble_timer);
 }
+#endif
 
 /*
  * @brief Retrieve current time.
@@ -484,11 +490,14 @@
  */
 uint32_t timer_get_time(void)
 {
+#if 0
         uint32_t current_time_10ms;
 
         current_time_10ms = (OS_TICKS_2_MS(OS_GET_TICK_COUNT()) / 10) & KE_GROSSTIMER_MASK;
 
         return current_time_10ms;
+#endif
+	return 0;
 }
 
 /*
@@ -498,6 +507,7 @@
  */
 void timer_set_timeout(uint32_t to)
 {
+#if 0
         OS_BASE_TYPE ret;
         uint32_t current_time_10ms, timeout_10ms;
 
@@ -518,6 +528,7 @@
         }
 
         OS_ASSERT(ret == OS_TIMER_SUCCESS);
+#endif
 }
 
 /*
@@ -525,6 +536,7 @@
  */
 void timer_enable(bool enable)
 {
+#if 0
         OS_BASE_TYPE ret;
 
         OS_ASSERT(ble_timer);
@@ -544,6 +556,7 @@
         }
 
         OS_ASSERT(ret == OS_TIMER_SUCCESS);
+#endif
 }
 
 void sys_temp_meas_enable(void)
@@ -560,4 +573,8 @@
 #endif
 }
 
+void crypto_init(void) {
+
+}
+
 #endif /* CONFIG_USE_BLE */
