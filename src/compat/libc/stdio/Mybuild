package embox.compat.libc.stdio

static module print {
	option number support_floating = 1

	source "printf_impl.c"
	source "printf_impl.h"

	depends embox.compat.libc.math                   // depends from support_floating value
	@NoRuntime depends embox.compat.libc.stdlib.core // atoi
	@NoRuntime depends embox.compat.libc.str         // strlen
	@NoRuntime depends embox.compat.libc.type
}

static module sprintf {
	source "sprintf.c"
	source "snprintf.c"

	@NoRuntime depends print
	@NoRuntime depends embox.lib.LibGcc
}

static module file_pool {
	option number file_quantity = 16

	source "stdio_file.c"
}

static module open {
	source "fopen.c"
	depends file_pool
	depends embox.compat.posix.fs.open
	depends embox.compat.posix.fs.close
	@NoRuntime depends embox.compat.libc.str
	depends embox.compat.posix.idx.dup
}

static module fseek {
	source "fseek.c"

	depends embox.compat.posix.fs.lseek
}

static module printf {
	source "printf.c"
	source "fprintf.c"

	depends fputc
	depends fputs
	/* gcc automatically repalces printf()
	 * w/ puts() if no arguments after format are given
	 */
}

static module fwrite {
	source "fwrite.c"

	depends embox.compat.posix.fs.write
	depends embox.kernel.task.resource.errno

	depends funopen
}

static module fputc {
	source "fputc.c"

	depends fwrite
	depends stdio_static
}

static module fputs {
	source "fputs.c"

	depends fputc
}

static module stdio_static {
	source "stdfile_static.c"
}

static module funopen {
	source "funopen.c"

	depends file_pool
}
static module file_ops {

	source "fgetc.c"
	source "ungetc.c"
	source "fgets.c"

	source "fileno.c"

	source "fread.c"
	depends embox.compat.posix.fs.read

	source "fioctl.c"
	source "fflush.c"
	source "fclose.c"

	source "stdio_stubs.c"
	source "buf.c"

	depends file_pool
	depends embox.compat.posix.fs.file_ops

	source "printf.c"
	source "fprintf.c"

	@NoRuntime depends print
	depends open
	depends fputc
	depends fputs
	depends fwrite
	depends stdio_static
}

@DefaultImpl(rename_old)

abstract module rename {
}

static module rename_old extends rename {
	source "rename.c"
}

static module rename_dvfs extends rename {
	source "rename_dvfs.c"

	depends embox.fs.dvfs.core
	depends embox.compat.libc.str
	depends open
	depends file_ops
}

static module all {
	@NoRuntime depends rename
	@NoRuntime depends sprintf
	@NoRuntime depends open
	@NoRuntime depends fseek
	@NoRuntime depends file_ops
	@NoRuntime depends scanf
	@NoRuntime depends perror
	@NoRuntime depends div
}

static module perror {
	source "perror.c"
}

static module scanf {
	source "scanf.c"

	depends file_ops /* ungetc() */
}

static module div {
	source "div.c"
	source "ldiv.c"
	/* source "lldiv.c" */
}

static module asprintf {
	source "asprintf.c"
}
