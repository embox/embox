package embox.kernel.thread

module core {
	option number thread_stack_size=8192
	option number thread_pool_size=16

	source "core.c"
	source "thread_allocator.c"
	source "thread_switch.c"

	depends sched_wait

	@NoRuntime depends embox.kernel.sched.sched
	@NoRuntime depends embox.kernel.sched.sched_ticker
	@NoRuntime depends embox.arch.context


	depends stack_api
	depends thread_local
	depends thread_cancel
	depends signal_api
	depends thread_wait

	depends embox.compat.libc.assert

	depends embox.kernel.cpu.common
	depends embox.kernel.sched.current.api

	depends stack_protect
}

module sched_wait {
	option boolean timer_allocate_on_stack = true
	source "thread_sched_wait.c"
}

@DefaultImpl(signal_impl)
abstract module signal_api { }

module signal_stub extends signal_api {
	source "signal_stub.c"
	@NoRuntime depends embox.kernel.thread.signal.sigstate_stub
	@NoRuntime depends embox.kernel.thread.signal.siginfoq_stub
	@NoRuntime depends embox.kernel.thread.signal.lock_stub
}

module signal_impl extends signal_api {
	source "signal.c"
	@NoRuntime depends embox.kernel.thread.signal.sigstate
	@NoRuntime depends embox.kernel.thread.signal.siginfoq
	@NoRuntime depends embox.kernel.thread.signal.lock
	depends embox.kernel.task.resource.sig_table
}

@DefaultImpl(fixed_stack)
abstract module stack_api {
}

module stack_none extends stack_api {
	source "stack_none.h"
}

module fixed_stack extends stack_api {
	source "fixed_stack.c"
	source "fixed_stack.h"
}

@DefaultImpl(thread_local_none)
abstract module thread_local {
	option number thread_key_quantity=0x40
}

module thread_local_none extends thread_local {
	source "thread_local_none.h"
}

module thread_local_heap extends thread_local {
	source "thread_local_heap.c"
	source "thread_local_heap.h"

	depends embox.mem.sysmalloc_api

	depends embox.kernel.task.resource.thread_key_table
	depends embox.kernel.task.syslib.thread_key_table
}

@DefaultImpl(thread_cancel_disable)
abstract module thread_cancel {}

module thread_cancel_enable extends thread_cancel {
	source "thread_cancel_enable.h"
	source "thread_cancel_enable.c"
	option number cleanups_quantity=100
}

module thread_cancel_disable extends thread_cancel {
	source "thread_cancel_disable.h"
}

@DefaultImpl(thread_wait_stub)
abstract module thread_wait { }

module thread_wait_stub extends thread_wait {
	source "thread_wait_stub.c"
	source "thread_wait_stub.h"
}

module stack_protect {
	source "stack_protect.c"
}

