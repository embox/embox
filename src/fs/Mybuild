package embox.fs

module node {
	option number fnode_quantity=64

	source "inode.c"
	source "dentry.c"

	@IncludeExport(path="fs")
	source "inode.h"
	@IncludeExport(path="fs")
	source "dentry.h"

	depends embox.driver.block_dev
	depends embox.kernel.thread.mutex
	@NoRuntime depends embox.util.tree
}

module filesystem {
	option number fs_quantity=32
	option number mount_desc_quantity=16

	source "super_block.c"
	source "mount_table.c"

	depends embox.fs.driver.repo
}

module file_desc {
	option number fdesc_quantity=32

	@IncludeExport(path="fs")
	source "file_desc.h"
	source "file_desc.c"

	source "file_xattr.c"

	depends idesc
	depends xattr

	depends embox.fs.syslib.perm
	depends embox.kernel.task.resource.idesc_table
}

module idesc {
	source "idesc.c"

	depends embox.kernel.task.resource.idesc_table
}

module idesc_event {
	source "idesc_event.c"
}

@DefaultImpl(no_file_system)
abstract module fs_api {

}

module no_file_system extends fs_api{
	depends embox.fs.syslib.fs_none
	depends embox.fs.syslib.file_system_none
}

module xattr {
	source "xattr.c"

	depends embox.security.api
}

module xattr_list {
	source "xattr_list.c"
}

module path_helper {
	source "hlpr_path.c"
}

module core extends fs_api {
	source "vfs.c"

	depends file_desc
	depends filesystem
	depends path_helper
	depends node

	depends embox.compat.libc.str
	depends embox.compat.posix.util.environ
	depends embox.util.tree
	depends embox.compat.posix.proc.uid

	depends embox.kernel.task.resource.vfs

	depends embox.kernel.task.api //vfs_get_leaf: environment should be initialized
}

module index_operation {
	source "index_operation.c"

	depends embox.fs.syslib.file
}

@DefaultImpl(rootfs)
abstract module root_file_system {
}

module rootfs extends root_file_system {
	source "rootfs.c"
	option string fstype = "initfs"
	option string bdev = ""
	@NoRuntime depends driver.devfs_old
	depends driver.repo
	depends node
	depends embox.fs.filesystem
	depends embox.kernel.task.api
	depends embox.fs.syslib.file_system_full
	depends embox.compat.libc.str
}

module rootfs_dvfs extends root_file_system {
	source "rootfs_dvfs.c"
	option string fstype = "initfs"
	option string bdev = ""

	depends embox.driver.block_dev
	depends embox.driver.char_dev
	depends embox.fs.dvfs.core
	depends embox.fs.driver.repo
	depends embox.kernel.task.api
}

module journal {
	source "journal.c"

	depends embox.compat.libc.assert
	depends embox.compat.libc.str

	depends buffer_cache
	depends embox.mem.slab

	depends embox.util.dlist
}

module buffer_cache {
	source "bcache.c"
	option number bcache_size=128
	option number bcache_align=512

	depends embox.mem.pool
	depends embox.kernel.thread.mutex

	depends embox.mem.sysmalloc_api

	@NoRuntime depends embox.util.hashtable
}

@DefaultImpl(buffer_no_crypt)
abstract module buffer_crypt_api {
}

module buffer_no_crypt extends buffer_crypt_api {
	source "buffer_no_crypt.c"
}

module file_format {
	@IncludeExport(path="fs")
	source "file_format.h"

	source "file_format.c"

	depends embox.compat.libc.all
}
